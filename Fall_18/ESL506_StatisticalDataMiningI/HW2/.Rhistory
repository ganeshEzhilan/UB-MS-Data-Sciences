cval.errors_forward [i] = mean(( caravan_cv$V86 - pred )^2)
}
num_var_forward = which.min (cval.errors_forward)
caravan_cvMSE_forward = cval.errors_forward[num_var_forward]
#Backward
caravan.fit.backward <- regsubsets(V86~., data = caravan_train, nbest = 1, nvmax = 85, method = "backward")
my_sum_backward <- summary(caravan.fit.backward)
par(mfrow = c(2,2))
plot(my_sum_backward$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
plot(my_sum_backward$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
plot(my_sum_backward$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(my_sum_backward$adjr2, xlab = "Number of Variables", ylab = "Adjusted R^2", type = "l")
cval.errors_backward = rep(NA ,85)
for (i in 1:85) {
coefi = coef(caravan.fit.backward ,id=i)
pred = caravan_cv.mat[, names ( coefi ) ]%*% coefi
cval.errors_backward [i] = mean(( caravan_cv$V86 - pred )^2)
}
num_var_backward = which.min (cval.errors_backward)
caravan_cvMSE_backward = cval.errors_backward[num_var_backward]
#Ridge Regression
caravan_train_matrix <- model.matrix(V86 ~ ., data = caravan_train)[,-1]
caravan_train_y <- caravan_train[,86]
caravan_cv_matrix <- model.matrix(V86 ~ ., data = caravan_cv)[,-1]
caravan_cv_y <- caravan_cv[,86]
grid =10^seq (10,-2, length = 100)
caravan.cv.model.ridge <- cv.glmnet(caravan_train_matrix, caravan_train_y, lambda = grid, alpha = 0)
caravan_bestlam_ridge <- caravan.cv.model.ridge$lambda.min
caravan.cv.pred.ridge <- predict(caravan.cv.model.ridge, s = caravan_bestlam_ridge, newx = caravan_cv_matrix, type = "response")
caravan_MSE_ridge <- mean((caravan.cv.pred.ridge - caravan_cv_y)^2)  #MSE = mean_test_error
#Lasso Regression Model
grid =10^seq (10,-2, length = 100)
caravan_train_matrix <- model.matrix(V86 ~ ., data = caravan_train)
caravan_train_y <- caravan_train[,86]
caravan_cv_matrix <- model.matrix(V86 ~ ., data = caravan_cv)
caravan_cv_y <- caravan_cv[,86]
caravan.cv.model.lasso <- cv.glmnet(caravan_train_matrix, caravan_train_y, alpha = 1)
caravan_bestlam_lasso <- caravan.cv.model.lasso$lambda.min
caravan.cv.pred.lasso <- predict(caravan.cv.model.lasso, s = caravan_bestlam_lasso, newx = caravan_cv_matrix, type = "response")
caravan_MSE_lasso <- mean((caravan.cv.pred.lasso - caravan_cv_y)^2)  #MSE = mean_test_error
?rnorm
a = matrix(sample.int(15, 9*100, TRUE), 9, 100)
View(a)
View(a)
rm(a)
setwd("/Users/abhishekkumar/Documents/MS_UB/Fall_18/ESL506_StatisticalDataMiningI/HW2")
?sample.int
knitr::opts_chunk$set(echo = TRUE)
X = matrix(sample.int(50, 9*100, TRUE), 1000, 20)
View(X)
beta = matrix(sample.int(10, 20, FALSE), 20, 1)
beta = matrix(sample.int(100, 20, FALSE), 20, 1)
View(beta)
beta[3] <- 0
beta[13] <- 0
beta[12] <- 0
beta[16] <- 0
beta[6] <- 0
View(beta)
?rnorm
epsilon = rnorm(20, mean = 0, sd = 1)
dim(epsilon)
epsilon <- rnorm(20, mean = 0, sd = 1)
aa = X*beta+epsilon
aa = X%*%beta+epsilon
View(aa)
rm(aa)
Y = X%*%beta+epsilon
colnames(X) <- letters[1:ncol(X)]
View(X)
View(X)
colnames(X) <- numbers[1:ncol(X)]
colnames(X) <- integers[1:ncol(X)]
X = matrix(sample.int(50, 9*100, TRUE), 1000, 20)
beta = matrix(sample.int(100, 20, FALSE), 20, 1)
beta[3] <- 0
beta[13] <- 0
beta[12] <- 0
beta[16] <- 0
beta[6] <- 0
epsilon <- rnorm(20, mean = 0, sd = 1)
Y = X%*%beta+epsilon
backward <- regsubsets(Y~X, data = X, nbest = 1, nvmax = 20, method = "backward")
library(leaps)
backward <- regsubsets(Y~X, data = X, nbest = 1, nvmax = 20, method = "backward")
data = data.frame(Y,X)
View(data)
backward <- regsubsets(Y~., data = custom_data, nbest = 1, nvmax = 20, method = "backward")
custom_data = data.frame(Y,X)
backward <- regsubsets(Y~., data = custom_data, nbest = 1, nvmax = 20, method = "backward")
summary(backward)
X = matrix(sample.int(50, 9*100, TRUE), 1000, 20)
beta = matrix(sample.int(100, 20, FALSE), 20, 1)
beta[3] <- 0
beta[13] <- 0
beta[12] <- 0
beta[16] <- 0
beta[6] <- 0
epsilon <- rnorm(20, mean = 0, sd = 1)
Y = X%*%beta+epsilon
custom_data = data.frame(Y,X)
backward <- regsubsets(Y~., data = custom_data, nbest = 1, nvmax = 20)
my_sum_backward <- summary(caravan.fit.backward)
my_sum_backward <- summary(backward)
X = matrix(sample.int(50, 9*100, TRUE), 1000, 20)
beta = matrix(sample.int(100, 20, FALSE), 20, 1)
beta[3] <- 0
beta[13] <- 0
beta[12] <- 0
beta[16] <- 0
beta[6] <- 0
epsilon <- rnorm(20, mean = 0, sd = 1)
Y = X%*%beta+epsilon
custom_data = data.frame(Y,X)
#creating train-test set
set.seed(123)
custom_train_index <- sample(1:nrow(Y), round(nrow(Y)*0.1))
custom_test_index <- -custom_train
X = matrix(sample.int(50, 9*100, TRUE), 1000, 20)
beta = matrix(sample.int(100, 20, FALSE), 20, 1)
beta[3] <- 0
beta[13] <- 0
beta[12] <- 0
beta[16] <- 0
beta[6] <- 0
epsilon <- rnorm(20, mean = 0, sd = 1)
Y = X%*%beta+epsilon
custom_data = data.frame(Y,X)
#creating train-test set
set.seed(123)
custom_train_index <- sample(1:nrow(Y), round(nrow(Y)*0.1))
custom_test_index <- -custom_train_index
custom_train <- custom_data[custom_train_index,]
custom_test <- custom_data[custom_test_index,]
custom.fit.best <- regsubsets(Y~., data = custom_train, nbest = 1, nvmax = 20)
train_sum_custom_best <- summary(custom.fit.best)
View(train_sum_custom_best)
dt.val.errors <- data.table(train.errors_best,seq(1:20))
?data
rm(list=ls())
X = matrix(sample.int(50, 9*100, TRUE), 1000, 20)
beta = matrix(sample.int(100, 20, FALSE), 20, 1)
beta[3] <- 0
beta[13] <- 0
beta[12] <- 0
beta[16] <- 0
beta[6] <- 0
epsilon <- rnorm(20, mean = 0, sd = 1)
Y = X%*%beta+epsilon
custom_data = data.frame(Y,X)
#creating train-test set
set.seed(123)
custom_train_index <- sample(1:nrow(Y), round(nrow(Y)*0.1))
custom_test_index <- -custom_train_index
custom_train <- custom_data[custom_train_index,]
custom_test <- custom_data[custom_test_index,]
#Fitting the data
custom.fit.best <- regsubsets(Y~., data = custom_train, nbest = 1, nvmax = 20)
train_sum_custom_best <- summary(custom.fit.best)
par(mfrow = c(2,2))
plot(train_sum_custom_best$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
plot(train_sum_custom_best$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
plot(train_sum_custom_best$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(train_sum_custom_best$adjr2, xlab = "Number of Variables", ylab = "Adjusted R^2", type = "l")
custom_train.mat = model.matrix(Y ~ ., data= custom_train)
train.errors_best = rep(NA ,20)
for (i in 1:20) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_train.mat[, names ( coefi ) ]%*% coefi
train.errors_best [i] = mean(( custom_train$Y - pred )^2)
}
train.errors_best = rep(NA ,9)
for (i in 1:9) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_train.mat[, names ( coefi ) ]%*% coefi
train.errors_best [i] = mean(( custom_train$Y - pred )^2)
}
library(ggplot2)
dt.val.errors <- data.frame(train.errors_best,seq(1:9))
View(dt.val.errors)
ggplot(dt.val.errors, aes(x=V2,y=val.errors)) + geom_line()
ggplot(dt.val.errors, aes(y=train.errors_best,x=seq.1.9.)) + geom_line()
dt.val.errors <- data.frame(train.errors_best)
dt.val.errors <- data.frame(train.errors_best,seq(1:9), colnames("errors", "set"))
dt.val.errors <- data.frame(train.errors_best,seq(1:9), colnames(c("errors", "set")))
dt.val.errors <- data.frame(train.errors_best,seq(1:9))
colnames(dt.val.errors) <- c("error","subset")
df.train.errors <- data.frame(train.errors_best,seq(1:9))
colnames(df.train.errors) <- c("error","subset")
ggplot(df.train.errors, aes(y=error,x=subset)) + geom_line()
custom_test.mat = model.matrix(Y ~ ., data= custom_test)
test.errors_best = rep(NA ,9)
for (i in 1:9) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_test.mat[, names ( coefi ) ]%*% coefi
test.errors_best [i] = sqrt(mean(( custom_test$Y - pred )^2))
}
library(ggplot2)
df.test.errors <- data.frame(test.errors_best,seq(1:9))
colnames(df.test.errors) <- c("RMSE test error","subset")
ggplot(df.test.errors, aes(y=error,x=subset)) + geom_line()
custom.fit.best <- regsubsets(Y~., data = custom_train, nbest = 1, nvmax = 20)
train_sum_custom_best <- summary(custom.fit.best)
custom_train.mat = model.matrix(Y ~ ., data= custom_train)
train.errors_best = rep(NA ,9)
for (i in 1:9) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_train.mat[, names ( coefi ) ]%*% coefi
train.errors_best [i] = sqrt(mean(( custom_train$Y - pred )^2))
}
library(ggplot2)
df.train.errors <- data.frame(train.errors_best,seq(1:9))
colnames(df.train.errors) <- c("RMSE_training_error","subset")
ggplot(df.train.errors, aes(y=RMSE_training_error,x=subset)) + geom_line()
custom_test.mat = model.matrix(Y ~ ., data= custom_test)
test.errors_best = rep(NA ,9)
for (i in 1:9) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_test.mat[, names ( coefi ) ]%*% coefi
test.errors_best [i] = sqrt(mean(( custom_test$Y - pred )^2))
}
library(ggplot2)
df.test.errors <- data.frame(test.errors_best,seq(1:9))
colnames(df.test.errors) <- c("RMSE_test_error","subset")
ggplot(df.test.errors, aes(y=RMSE_test_error,x=subset)) + geom_line()
ggplot(df.test.errors, aes(y=RMSE_test_error,x=subset)) + geom_line() + scale_x_continuous(breaks = seq(0, 10, 1))
ggplot(df.test.errors, aes(y=RMSE_test_error,x=subset)) + geom_line() + scale_x_continuous(breaks = seq(0, 12, 1))
ggplot(df.train.errors, aes(y=RMSE_training_error,x=subset)) + geom_line() + scale_x_continuous(breaks = seq(0, 12, 1))
ggplot(df.test.errors, aes(y=RMSE_test_error,x=subset)) + geom_line() + scale_x_continuous(breaks = seq(0, 12, 1))
df.error$train = df.train.errors$RMSE_training_error
df.error = data.frame("Name" = c("test","train", "sub"))
df.error = data.frame("Name" = c("test","train", "sub"))
df.error$train = df.train.errors$RMSE_training_error
df.error = data.frame("test", "train", "sub")
df.error$train = df.train.errors$RMSE_training_error
View(df.error)
df.error = data.frame(df.train.errors$RMSE_training_error, df.test.errors$RMSE_test_error, df.test.errors$subset)
View(df.error)
df.errors <- data.frame(train.errors_best,test.errors_best,seq(1:9))
colnames(df.test.errors) <- c("RMSE_training_error", "RMSE_test_error","subset")
df.errors <- data.frame(train.errors_best,test.errors_best,seq(1:9))
colnames(df.errors) <- c("RMSE_training_error", "RMSE_test_error","subset")
df.errors <- data.frame(train.errors_best,test.errors_best,seq(1:9))
colnames(df.errors) <- c("RMSE_training_error", "RMSE_test_error","subset")
ggplot(df.errors, aes(x=df.errors$subset)) + geom_line(aes(y = df.errors$RMSE_test_error), colour = "grey") + geom_line(aes(y = df.errors$RMSE_training_error), colour = "blue") + scale_x_continuous(breaks = seq(0, 12, 1))
ggplot(df.errors, aes(x=df.errors$subset)) + geom_line(aes(y = df.errors$RMSE_test_error), colour = "orange") + geom_line(aes(y = df.errors$RMSE_training_error), colour = "blue") + scale_x_continuous(breaks = seq(0, 12, 1))
which.min(df.errors$RMSE_test_error)
which.min(df.errors$RMSE_test_error)
coef(custom.fit.best, id =8)
View(beta)
rm(list=ls())
X = matrix(rnorm(50, 20*1000, TRUE), 1000, 20)
beta = matrix(sample.int(100, 20, FALSE), 20, 1)
beta[3] <- 0
beta[13] <- 0
beta[12] <- 0
beta[16] <- 0
beta[6] <- 0
epsilon <- rnorm(20, mean = 0, sd = 1)
Y = X%*%beta+epsilon
custom_data = data.frame(Y,X)
#creating train-test set
set.seed(123)
custom_train_index <- sample(1:nrow(Y), round(nrow(Y)*0.1))
custom_test_index <- -custom_train_index
custom_train <- custom_data[custom_train_index,]
custom_test <- custom_data[custom_test_index,]
#Fitting the data
custom.fit.best <- regsubsets(Y~., data = custom_train, nbest = 1, nvmax = 20)
train_sum_custom_best <- summary(custom.fit.best)
custom_train.mat = model.matrix(Y ~ ., data= custom_train)
train.errors_best = rep(NA ,9)
for (i in 1:9) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_train.mat[, names ( coefi ) ]%*% coefi
train.errors_best [i] = sqrt(mean(( custom_train$Y - pred )^2))
}
for (i in 1:20) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_train.mat[, names ( coefi ) ]%*% coefi
train.errors_best [i] = sqrt(mean(( custom_train$Y - pred )^2))
}
train.errors_best = rep(NA ,20)
for (i in 1:20) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_train.mat[, names ( coefi ) ]%*% coefi
train.errors_best [i] = sqrt(mean(( custom_train$Y - pred )^2))
}
for (i in 1:10) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_train.mat[, names ( coefi ) ]%*% coefi
train.errors_best [i] = sqrt(mean(( custom_train$Y - pred )^2))
}
coef(custom.fit.best ,id=1)
coef(custom.fit.best ,id=2)
custom.fit.best <- regsubsets(Y~., data = custom_train, nvmax = 20)
train_sum_custom_best <- summary(custom.fit.best)
custom_train.mat = model.matrix(Y ~ ., data= custom_train)
train.errors_best = rep(NA ,20)
for (i in 1:20) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_train.mat[, names ( coefi ) ]%*% coefi
train.errors_best [i] = sqrt(mean(( custom_train$Y - pred )^2))
}
coef(custom.fit.best ,id=1)
coef(custom.fit.best ,id=2)
rm(list=ls())
X = matrix(sample.int(50, 9*100, TRUE), 1000, 20)
beta = matrix(sample.int(100, 20, FALSE), 20, 1)
beta[3] <- 0
beta[13] <- 0
beta[12] <- 0
beta[16] <- 0
beta[6] <- 0
epsilon <- rnorm(20, mean = 0, sd = 1)
Y = X%*%beta+epsilon
custom_data = data.frame(Y,X)
#creating train-test set
set.seed(123)
custom_train_index <- sample(1:nrow(Y), round(nrow(Y)*0.1))
custom_test_index <- -custom_train_index
custom_train <- custom_data[custom_train_index,]
custom_test <- custom_data[custom_test_index,]
#Fitting the data
custom.fit.best <- regsubsets(Y~., data = custom_train, nbest = 1, nvmax = 20)
train_sum_custom_best <- summary(custom.fit.best)
custom_train.mat = model.matrix(Y ~ ., data= custom_train)
train.errors_best = rep(NA ,9)
for (i in 1:9) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_train.mat[, names ( coefi ) ]%*% coefi
train.errors_best [i] = sqrt(mean(( custom_train$Y - pred )^2))
}
library(ggplot2)
df.train.errors <- data.frame(train.errors_best,seq(1:9))
colnames(df.train.errors) <- c("RMSE_training_error","subset")
ggplot(df.train.errors, aes(y=RMSE_training_error,x=subset)) + geom_line() + scale_x_continuous(breaks = seq(0, 12, 1))
custom_test.mat = model.matrix(Y ~ ., data= custom_test)
test.errors_best = rep(NA ,9)
for (i in 1:9) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_test.mat[, names ( coefi ) ]%*% coefi
test.errors_best [i] = sqrt(mean(( custom_test$Y - pred )^2))
}
library(ggplot2)
df.errors <- data.frame(train.errors_best,test.errors_best,seq(1:9))
colnames(df.errors) <- c("RMSE_training_error", "RMSE_test_error","subset")
ggplot(df.errors, aes(x=df.errors$subset)) + geom_line(aes(y = df.errors$RMSE_test_error), colour = "orange") + geom_line(aes(y = df.errors$RMSE_training_error), colour = "blue") + scale_x_continuous(breaks = seq(0, 12, 1))
rm(list=ls())
X = matrix(sample.int(50, 20000, TRUE), 1000, 20)
beta = matrix(sample.int(100, 20, FALSE), 20, 1)
beta[3] <- 0
beta[13] <- 0
beta[12] <- 0
beta[16] <- 0
beta[6] <- 0
epsilon <- rnorm(20, mean = 0, sd = 1)
Y = X%*%beta+epsilon
custom_data = data.frame(Y,X)
#creating train-test set
set.seed(123)
custom_train_index <- sample(1:nrow(Y), round(nrow(Y)*0.1))
custom_test_index <- -custom_train_index
custom_train <- custom_data[custom_train_index,]
custom_test <- custom_data[custom_test_index,]
#Fitting the data
custom.fit.best <- regsubsets(Y~., data = custom_train, nbest = 1, nvmax = 20)
train_sum_custom_best <- summary(custom.fit.best)
custom_train.mat = model.matrix(Y ~ ., data= custom_train)
train.errors_best = rep(NA ,9)
for (i in 1:9) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_train.mat[, names ( coefi ) ]%*% coefi
train.errors_best [i] = sqrt(mean(( custom_train$Y - pred )^2))
}
library(ggplot2)
df.train.errors <- data.frame(train.errors_best,seq(1:9))
colnames(df.train.errors) <- c("RMSE_training_error","subset")
ggplot(df.train.errors, aes(y=RMSE_training_error,x=subset)) + geom_line() + scale_x_continuous(breaks = seq(0, 12, 1))
custom_test.mat = model.matrix(Y ~ ., data= custom_test)
test.errors_best = rep(NA ,9)
for (i in 1:9) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_test.mat[, names ( coefi ) ]%*% coefi
test.errors_best [i] = sqrt(mean(( custom_test$Y - pred )^2))
}
library(ggplot2)
df.errors <- data.frame(train.errors_best,test.errors_best,seq(1:9))
colnames(df.errors) <- c("RMSE_training_error", "RMSE_test_error","subset")
ggplot(df.errors, aes(x=df.errors$subset)) + geom_line(aes(y = df.errors$RMSE_test_error), colour = "orange") + geom_line(aes(y = df.errors$RMSE_training_error), colour = "blue") + scale_x_continuous(breaks = seq(0, 12, 1))
rm(list=ls())
X = matrix(sample.int(50, 20000, TRUE), 1000, 20)
beta = matrix(sample.int(100, 20, FALSE), 20, 1)
beta[3] <- 0
beta[13] <- 0
beta[12] <- 0
beta[16] <- 0
beta[6] <- 0
epsilon <- rnorm(20, mean = 0, sd = 1)
Y = X%*%beta+epsilon
custom_data = data.frame(Y,X)
#creating train-test set
set.seed(123)
custom_train_index <- sample(1:nrow(Y), round(nrow(Y)*0.1))
custom_test_index <- -custom_train_index
custom_train <- custom_data[custom_train_index,]
custom_test <- custom_data[custom_test_index,]
#Fitting the data
custom.fit.best <- regsubsets(Y~., data = custom_train, nbest = 1, nvmax = 20)
train_sum_custom_best <- summary(custom.fit.best)
custom_train.mat = model.matrix(Y ~ ., data= custom_train)
train.errors_best = rep(NA ,20)
for (i in 1:20) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_train.mat[, names ( coefi ) ]%*% coefi
train.errors_best [i] = sqrt(mean(( custom_train$Y - pred )^2))
}
library(ggplot2)
df.train.errors <- data.frame(train.errors_best,seq(1:9))
rm(list=ls())
X = matrix(sample.int(50, 20000, TRUE), 1000, 20)
beta = matrix(sample.int(100, 20, FALSE), 20, 1)
beta[3] <- 0
beta[13] <- 0
beta[12] <- 0
beta[16] <- 0
beta[6] <- 0
epsilon <- rnorm(20, mean = 0, sd = 1)
Y = X%*%beta+epsilon
custom_data = data.frame(Y,X)
#creating train-test set
set.seed(123)
custom_train_index <- sample(1:nrow(Y), round(nrow(Y)*0.1))
custom_test_index <- -custom_train_index
custom_train <- custom_data[custom_train_index,]
custom_test <- custom_data[custom_test_index,]
#Fitting the data
custom.fit.best <- regsubsets(Y~., data = custom_train, nbest = 1, nvmax = 20)
train_sum_custom_best <- summary(custom.fit.best)
custom_train.mat = model.matrix(Y ~ ., data= custom_train)
train.errors_best = rep(NA ,20)
for (i in 1:20) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_train.mat[, names ( coefi ) ]%*% coefi
train.errors_best [i] = sqrt(mean(( custom_train$Y - pred )^2))
}
library(ggplot2)
df.train.errors <- data.frame(train.errors_best,seq(1:20))
colnames(df.train.errors) <- c("RMSE_training_error","subset")
ggplot(df.train.errors, aes(y=RMSE_training_error,x=subset)) + geom_line() + scale_x_continuous(breaks = seq(0, 12, 1))
custom_test.mat = model.matrix(Y ~ ., data= custom_test)
test.errors_best = rep(NA ,20)
for (i in 1:20) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_test.mat[, names ( coefi ) ]%*% coefi
test.errors_best [i] = sqrt(mean(( custom_test$Y - pred )^2))
}
library(ggplot2)
df.errors <- data.frame(train.errors_best,test.errors_best,seq(1:20))
colnames(df.errors) <- c("RMSE_training_error", "RMSE_test_error","subset")
ggplot(df.errors, aes(x=df.errors$subset)) + geom_line(aes(y = df.errors$RMSE_test_error), colour = "orange") + geom_line(aes(y = df.errors$RMSE_training_error), colour = "blue") + scale_x_continuous(breaks = seq(0, 12, 1))
rm(list=ls())
X = matrix(sample.int(50, 20000, TRUE), 1000, 20)
beta = matrix(sample.int(100, 20, FALSE), 20, 1)
beta[3] <- 0
beta[13] <- 0
beta[12] <- 0
beta[16] <- 0
beta[6] <- 0
epsilon <- rnorm(20, mean = 0, sd = 1)
Y = X%*%beta+epsilon
custom_data = data.frame(Y,X)
#creating train-test set
set.seed(123)
custom_train_index <- sample(1:nrow(Y), round(nrow(Y)*0.1))
custom_test_index <- -custom_train_index
custom_train <- custom_data[custom_train_index,]
custom_test <- custom_data[custom_test_index,]
#Fitting the data
custom.fit.best <- regsubsets(Y~., data = custom_train, nbest = 1, nvmax = 20)
train_sum_custom_best <- summary(custom.fit.best)
custom_train.mat = model.matrix(Y ~ ., data= custom_train)
train.errors_best = rep(NA ,20)
for (i in 1:20) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_train.mat[, names ( coefi ) ]%*% coefi
train.errors_best [i] = sqrt(mean(( custom_train$Y - pred )^2))
}
library(ggplot2)
df.train.errors <- data.frame(train.errors_best,seq(1:20))
colnames(df.train.errors) <- c("RMSE_training_error","subset")
ggplot(df.train.errors, aes(y=RMSE_training_error,x=subset)) + geom_line() + scale_x_continuous(breaks = seq(0, 12, 1))
custom_test.mat = model.matrix(Y ~ ., data= custom_test)
test.errors_best = rep(NA ,20)
for (i in 1:20) {
coefi = coef(custom.fit.best ,id=i)
pred = custom_test.mat[, names ( coefi ) ]%*% coefi
test.errors_best [i] = sqrt(mean(( custom_test$Y - pred )^2))
}
library(ggplot2)
df.errors <- data.frame(train.errors_best,test.errors_best,seq(1:20))
colnames(df.errors) <- c("RMSE_training_error", "RMSE_test_error","subset")
ggplot(df.errors, aes(x=df.errors$subset)) + geom_line(aes(y = df.errors$RMSE_test_error), colour = "orange") + geom_line(aes(y = df.errors$RMSE_training_error), colour = "blue") + scale_x_continuous(breaks = seq(0, 20, 1))
which.min(df.errors$RMSE_test_error)
coef(custom.fit.best, id =8)
which.min(df.errors$RMSE_test_error)
coef(custom.fit.best, id =15)
View(beta)
?College
library(ISLR)
?College
summary(College)
